
type Fallible[UHE, HE, A] = ???
namespace Fallible {

    // =====| Types |=====

    // TODO (KR) : Come up with names for these
    
    type F1[UHE, A] = Fallible[UHE,     Nothing, A]
    type F2[HE, A]  = Fallible[Nothing, HE,      A]

    type F3[A] = Fallible[Nothing, Nothing, A]

    type F4[UHE, HE] = Fallible[UHE,     HE,      Nothing]
    type F5[UHE]     = Fallible[UHE,     Nothing, Nothing]
    type F6[HE]      = Fallible[Nothing, HE,      Nothing]

    // =====| Constructors |=====

    succeed : [A] ->   A ->   Fallible.F3[A]   = ???
    fail    : [HE] ->  HE ->  Fallible.F6[HE]  = ???
    die     : [UHE] -> UHE -> Fallible.F5[UHE] = ???

    // =====| Functions |=====

    mapSucced : [UHE, HE, A] -> (fallible: Fallible[UHE, HE, A]) -> [A2]   -> (f: A -> A2)     -> Fallible[UHE,  HE,  A2] = ???
    mapFail   : [UHE, HE, A] -> (fallible: Fallible[UHE, HE, A]) -> [HE2]  -> (f: HE -> HE2)   -> Fallible[UHE,  HE2, A ] = ???
    mapDie    : [UHE, HE, A] -> (fallible: Fallible[UHE, HE, A]) -> [UHE2] -> (f: UHE -> UHE2) -> Fallible[UHE2, HE,  A ] = ???

}

// --- possibly have some syntatic sugar for these? ---

tmp1 : Int??         = ???  // Fallible[Error,   Nothing, Int]
tmp2 : Int??[String] = ???  // Fallible[Error,   String,  Int]
tmp3 : Int?          = ???  // Fallible[Nothing, Error,   Int]
tmp4 : Int?[String]  = ???  // Fallible[Nothing, String,  Int]

// --- syntatic sugar for effects as well? ---

tmp4 : #Int = ???  // Effect[Int]
tmp5 : !Int = ???  // Effect[Int]

// Im not sure if I like '#' or '!' better...
// - on one hand, '#' is the same as the proposed 'unwrap' syntax
// - not sure if that is a pro or a con
// - if '#' matches '#', then the error syntax should probably match as well?



// 'effect-unwrap'/'effect-type' + 'failable-unwrap'/'failable-type'



// --- [1] : '#'/'#' + '~'/'?' ---

// helpers

getInfo : #(String, Int)?? = {
    _    : Unit   = #Console.print("Your name: ")
    name : String = #Console.readLine
    _    : Unit   = #Console.print("Your age: ")
    age  : Int    = ~(#Console.readLine).toInt

    (name, age)
}

makePurchase : (name: String, age: Int) -> Beer?[String] =
  if (age >= 21) Fallible.succeed(Beer.new)
  else           Fallible.fail("Sorry, $name, you are not old enough")

// implementation

buyBeer : #Beer??[String] = {
    (name, age) : (String, Int) = ~#getInfo
    fBeer       : Beer?[String] = makePurchase(name, age)
    fBeer2      : Beer?[String] = fBeer.mapFail { e -> "Uh oh... $e" }
    beer        : Beer          = ~fBeer2

    beer
}



// --- [2] : '#'/'#' + '?'/'?' ---

// helpers

getInfo : #(String, Int)?? = {
    _    : Unit   = #Console.print("Your name: ")
    name : String = #Console.readLine
    _    : Unit   = #Console.print("Your age: ")
    age  : Int    = ?(#Console.readLine).toInt

    (name, age)
}

makePurchase : (name: String, age: Int) -> Beer?[String] =
  if (age >= 21) Fallible.succeed(Beer.new)
  else           Fallible.fail("Sorry, $name, you are not old enough")

// implementation

buyBeer : #Beer??[String] = {
    (name, age) : (String, Int) = ?#getInfo
    fBeer       : Beer?[String] = makePurchase(name, age)
    fBeer2      : Beer?[String] = fBeer.mapFail { e -> "Uh oh... $e" }
    beer        : Beer          = ?fBeer2

    beer
}



// --- [3] : '#'/'#' + '~'/'~' ---

// helpers

getInfo : #(String, Int)~~ = {
    _    : Unit   = #Console.print("Your name: ")
    name : String = #Console.readLine
    _    : Unit   = #Console.print("Your age: ")
    age  : Int    = ~(#Console.readLine).toInt

    (name, age)
}

makePurchase : (name: String, age: Int) -> Beer~[String] =
  if (age >= 21) Fallible.succeed(Beer.new)
  else           Fallible.fail("Sorry, $name, you are not old enough")

// implementation

buyBeer : #Beer~~[String] = {
    (name, age) : (String, Int) = ~#getInfo
    fBeer       : Beer~[String] = makePurchase(name, age)
    fBeer2      : Beer~[String] = fBeer.mapFail { e -> "Uh oh... $e" }
    beer        : Beer          = ~fBeer2

    beer
}



// --- [4] : '#'/'!' + '~'/'?' ---

// helpers

getInfo : !(String, Int)?? = {
    _    : Unit   = #Console.print("Your name: ")
    name : String = #Console.readLine
    _    : Unit   = #Console.print("Your age: ")
    age  : Int    = ~(#Console.readLine).toInt

    (name, age)
}

makePurchase : (name: String, age: Int) -> Beer?[String] =
  if (age >= 21) Fallible.succeed(Beer.new)
  else           Fallible.fail("Sorry, $name, you are not old enough")

// implementation

buyBeer : !Beer??[String] = {
    (name, age) : (String, Int) = ~#getInfo
    fBeer       : Beer?[String] = makePurchase(name, age)
    fBeer2      : Beer?[String] = fBeer.mapFail { e -> "Uh oh... $e" }
    beer        : Beer          = ~fBeer2

    beer
}



// --- [5] : '!'/'#' + '~'/'?' ---
// I think that this one is a total no-go, it reads way too much like boolean not

// helpers

getInfo : #(String, Int)?? = {
    _    : Unit   = !Console.print("Your name: ")
    name : String = !Console.readLine
    _    : Unit   = !Console.print("Your age: ")
    age  : Int    = ~(#Console.readLine).toInt

    (name, age)
}

makePurchase : (name: String, age: Int) -> Beer?[String] =
  if (age >= 21) Fallible.succeed(Beer.new)
  else           Fallible.fail("Sorry, $name, you are not old enough")

// implementation

buyBeer : #Beer??[String] = {
    (name, age) : (String, Int) = ~!getInfo
    fBeer       : Beer?[String] = makePurchase(name, age)
    fBeer2      : Beer?[String] = fBeer.mapFail { e -> "Uh oh... $e" }
    beer        : Beer          = ~fBeer2

    beer
}



// using '?'

tmpQ1 : Int?                    = ???  // Fallible[Nothing, Error,   Int]
tmpQ2 : Int?[String]            = ???  // Fallible[Nothing, String,  Int]
tmpQ3 : Int??                   = ???  // Fallible[Error,   Nothing, Int]
tmpQ4 : Int??[String]           = ???  // Fallible[Error,   String,  Int]
tmpQ5 : Int???                  = ???  // Fallible[Error,   Error,   Int]
tmpQ6 : Int???[String, Boolean] = ???  // Fallible[String,  Boolean, Int]

tmpEQ1 : #Int?                    = ???  // Effect[Fallible[Nothing, Error,   Int]]
tmpEQ2 : #Int?[String]            = ???  // Effect[Fallible[Nothing, String,  Int]]
tmpEQ3 : #Int??                   = ???  // Effect[Fallible[Error,   Nothing, Int]]
tmpEQ4 : #Int??[String]           = ???  // Effect[Fallible[Error,   String,  Int]]
tmpEQ5 : #Int???                  = ???  // Effect[Fallible[Error,   Error,   Int]]
tmpEQ6 : #Int???[String, Boolean] = ???  // Effect[Fallible[String,  Boolean, Int]]

// using '~'

tmpT1 : Int~                    = ???  // Fallible[Nothing, Error,   Int]
tmpT2 : Int~[String]            = ???  // Fallible[Nothing, String,  Int]
tmpT3 : Int~~                   = ???  // Fallible[Error,   Nothing, Int]
tmpT4 : Int~~[String]           = ???  // Fallible[Error,   String,  Int]
tmpT5 : Int~~~                  = ???  // Fallible[Error,   Error,   Int]
tmpT6 : Int~~~[String, Boolean] = ???  // Fallible[String,  Boolean, Int]

tmpET1 : #Int~                    = ???  // Effect[Fallible[Nothing, Error,   Int]]
tmpET2 : #Int~[String]            = ???  // Effect[Fallible[Nothing, String,  Int]]
tmpET3 : #Int~~                   = ???  // Effect[Fallible[Error,   Nothing, Int]]
tmpET4 : #Int~~[String]           = ???  // Effect[Fallible[Error,   String,  Int]]
tmpET5 : #Int~~~                  = ???  // Effect[Fallible[Error,   Error,   Int]]
tmpET6 : #Int~~~[String, Boolean] = ???  // Effect[Fallible[String,  Boolean, Int]]



I think '#'/'#' + '?'/'?' is the way to go.
I also think that the number of '?', and the meaning probably should be re-considered.


--- [1] ---

tmp1 : Int?[A, B] = ???  // Fallible[A,       B,       Int]

tmp2 : Int?[A]    = ???  // Fallible[A,       Nothing, Int]
tmp3 : Int?       = ???  // Fallible[Error,   Nothing, Int]

tmp4 : Int??[A]   = ???  // Fallible[Error,   A,       Int]
tmp5 : Int??      = ???  // Fallible[Error,   Error,   Int]

tmp6 : Int???[A]  = ???  // Fallible[Nothing,  A,      Int]
tmp7 : Int???     = ???  // Fallible[Nothing,  Error,  Int]


--- [2] ---

tmp1 : Int?[A, B] = ???  // Fallible[A,       B,       Int]

tmp2 : Int?[A]    = ???  // Fallible[Nothing, A,       Int]
tmp3 : Int?       = ???  // Fallible[Error,   Nothing, Int]

tmp4 : Int??[A]   = ???  // Fallible[A,       Nothing, Int]
tmp5 : Int??      = ???  // Fallible[Nothing, Error,   Int]

tmp6 : Int???[A]  = ???  // Fallible[_,       _,       Int]
tmp7 : Int???     = ???  // Fallible[_,       _,       Int]


// [2] just seems way too confusing, gonna go with [1]...
