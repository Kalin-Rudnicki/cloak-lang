namespace Cloak

// Should these automatically be in scope?
import Cloak.Compiler.Assert
import Cloak.Compiler.TailRec
import Cloak.Compiler.Override

import Cloak.Collections.List

class Int {

    // =====| Math |=====

    // I like the idea of private being the default
    public method + (i: Int): Int =
        native "asm"
    
    public method - (i: Int): Int =
        native "asm"

    public method * (i: Int): Int =
        native "asm"
    
    @Assert(i != 0)
    public method / (i: Int): Int =
        native "asm"

    // =====| Other |=====

    @Override
    public method toStr: String =
        toStrHelper(this, Nil)

    @TailRec
    function toStrHelper(left: Int, builder: List[UChar]): String = left match {
        case 0 => String(builder.reverse)
        case i =>
            // What are the rules on down-casing a value?
            // Especially implicitly? We will just go with it for now
            c: UChar = left % 10
            toStrHelper(left / 10, List(c, builder))
    }

}

/*
Would this be a fair assumption:
If you have a locally or globally defined function "f" of type "(T, ...) => R",
you can call t.f(...)

This should eliminate the need for ever having to do "pimp my class" conversions, just for the sake of infix notation
If the compiler sees multiple things it could call, you just have to specify it yourself.

I imagine this might be problematic for my idea regarding an incremental compiler.
I would need to do something smart to make sure no functions were added to namespaces in files... well...
If a file was changed, the compiler would need to compile it for incremental purposes. This is TBD...
Obviously though... if an object has a method with that name, it will prioritize that...

But overall, I think this concept makes a lot of sense, this is literally all that 
*/
namespace Int {

    // Assert str matches a certain regex
    // Probably unlikely to have much of a use, and if it needs to be checked at compile time, it will be slow
    // Would it make sense to have some sort of @CompileTimeAssert(...) where you can only call it if you can pass the assertion at compile time?
    public function parseInt(str: String): Int? = str.toCharList match {
        case Nil => NumberFormatErr("Length is 0"))
        case List("-", Nil) => NumberFormatErr("Length after '-' is 0")
        case List("-", chars) => -1 * parseNumbers(chars, 0)
        case chars => parseNumbers(chars, 0)
    }

    // private by default
    @TailRec
    function parseNumbers(chars: List[UChar], sum: Int): Int? = chars match {
        case Nil => sum
        case List(c, rest) if (c >= '0' && c <= '9') => parseNumbers(rest, sum * 10 + c - '0')
        case List(c, _) => NumberFormatErr("'$c' is not part of a valid base-10 number")
    }

    // parseBaseX
    // Would require more casing and checks, so I think it would be worth to have the regular base 10

}
